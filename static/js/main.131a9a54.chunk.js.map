{"version":3,"sources":["logo.svg","components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","monster","src","id","name","CardList","monsters","map","key","Searchbox","placeholder","handleChange","type","onChange","App","state","searchString","fetch","then","response","json","users","setState","err","console","error","this","filteredMonsters","filter","toLowerCase","includes","event","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kC,2LCG9BC,G,YAAO,SAACC,GACnB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAKF,EAAMG,QAASC,IAAG,+BAA0BJ,EAAMG,QAAQE,GAAxC,4BAC5B,4BAAKL,EAAMG,QAAQG,SCHZC,G,MAAW,SAACP,GACvB,OACE,yBAAKC,UAAU,aACZD,EAAMQ,SAASC,KAAI,SAACN,GAAD,OAClB,kBAAC,EAAD,CAAMO,IAAKP,EAAQE,GAAIF,QAASA,UCL3BQ,G,YAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,6BACE,2BACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCsCHG,E,YAzCb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXT,SAAU,CACR,CAAEF,KAAM,eAAgBD,GAAI,OAC5B,CAAEC,KAAM,UAAWD,GAAI,OACvB,CAAEC,KAAM,SAAUD,GAAI,QAExBa,aAAc,IATJ,E,iFAaO,IAAD,OAClB,IACEC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEhB,SAAUe,OAC3C,MAAOE,GACPC,QAAQC,MAAMF,M,+BAKR,IAAD,SAC4BG,KAAKX,MAAhCT,EADD,EACCA,SAAUU,EADX,EACWA,aACZW,EAAmBrB,EAASsB,QAAO,SAAA3B,GACvC,OAAOA,EAAQG,KAAKyB,cAAcC,SAASd,EAAaa,kBAE1D,OACE,yBAAK9B,UAAU,OACb,gDAEA,kBAAC,EAAD,CAAWW,YAAY,YAAYC,aAAc,SAAAoB,GAAK,OAAI,EAAKT,SAAS,CAAEN,aAAce,EAAMC,OAAOC,WACrG,kBAAC,EAAD,CAAU3B,SAAUqB,S,GAnCVO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLD,QAAQC,MAAMA,EAAMyB,c","file":"static/js/main.131a9a54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => {\n  return (\n    <div className='card-container'>\n      <img alt={props.monster} src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n      <h3>{props.monster.name}</h3>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Card } from '../card/card'\nimport './card-list.styles.css'\n\nexport const CardList = (props) => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster}></Card>\n      ))}</div>\n  )\n}\n","import React from 'react'\nimport './search-box.styles.css'\n\nexport const Searchbox = ({ placeholder, handleChange }) => {\n  return (\n    <div>\n      <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n      >\n      </input>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { CardList } from './components/card-list/card-list'\nimport './App.css';\nimport { Searchbox } from './components/search-box/search-box'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      monsters: [\n        { name: 'Frankenstein', id: '123' },\n        { name: 'Dracula', id: '124' },\n        { name: 'Zombie', id: '125' }\n      ],\n      searchString: ''\n    }\n  }\n\n  componentDidMount() {\n    try {\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ monsters: users }))\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n\n  render() {\n    const { monsters, searchString } = this.state\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchString.toLowerCase())\n    })\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        {/* <input type='search' placeholder='Type Here :)' onChange={(event) => { this.setState({ searchString: event.target.value }) }}></input> */}\n        <Searchbox placeholder='type here' handleChange={event => this.setState({ searchString: event.target.value })}></Searchbox>\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}